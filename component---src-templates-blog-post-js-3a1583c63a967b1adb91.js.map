{"version":3,"sources":["webpack://bestalign-blog/./src/components/nav.js","webpack://bestalign-blog/./src/templates/blog-post.js"],"names":["categories","sort","first","second","priority","className","map","category","Link","to","url","key","name","displayText","_","require","data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","frontmatter","description","excerpt","itemScope","itemType","itemProp","tags","tag","tagLinkUrl","kebabCase","date","updated","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"mappings":"6IAiBA,IAdY,SAAC,GAAkB,IAAjBA,EAAgB,EAAhBA,WAGZ,OAFAA,EAAWC,MAAK,SAACC,EAAOC,GAAa,OAAOD,EAAME,SAAWD,EAAOC,YAGlE,uBAAKC,UAAU,QAEXL,EAAWM,KAAK,SAACC,GACf,OAAO,gBAAC,EAAAC,KAAD,CAAMC,GAAIF,EAASG,IAAKC,IAAKJ,EAASK,MAAM,4BAAOL,EAASM,oB,+FCHvEC,EAAIC,EAAQ,MAiElB,UAhEyB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAElB,OACE,gBAAC,IAAD,CAAQR,SAAUA,EAAUM,MAAOH,GACjC,gBAAC,IAAD,CACEG,MAAOL,EAAKQ,YAAYH,MACxBI,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAEpD,gBAAC,IAAD,CAAK5B,WAAYgB,EAAKK,KAAKC,aAAatB,aACxC,2BACA,2BACEK,UAAU,YACVwB,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYb,EAAKQ,YAAYH,OACzCL,EAAKQ,YAAYM,MAChB,qCAAad,EAAKQ,YAAYM,KAAK1B,KAAK,SAAA2B,GACtC,IAAMC,EAAa,SAASpB,EAAEqB,UAAUF,GACxC,OAAO,wBAAM5B,UAAU,OAAM,gBAAC,EAAAG,KAAD,CAAMC,GAAKyB,GAAaD,QAGzD,yBAAIf,EAAKQ,YAAYU,KAAkC,MAA5BlB,EAAKQ,YAAYW,SAAmB,gBAAkBnB,EAAKQ,YAAYW,UAEpG,2BACEC,wBAAyB,CAAEC,OAAQrB,EAAKsB,MACxCT,SAAS,iBAGb,2BACA,uBAAK1B,UAAU,iBACb,sBACEoC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGtB,GACC,gBAAC,EAAAhB,KAAD,CAAMC,GAAIe,EAASuB,OAAOC,KAAMC,IAAI,QAApC,KACKzB,EAASE,YAAYH,QAI9B,0BACGE,GACC,gBAAC,EAAAjB,KAAD,CAAMC,GAAIgB,EAAKsB,OAAOC,KAAMC,IAAI,QAC7BxB,EAAKC,YAAYH,MADpB","file":"component---src-templates-blog-post-js-3a1583c63a967b1adb91.js","sourcesContent":["import { Link } from \"gatsby\"\nimport * as React from \"react\"\n\nconst Nav = ({categories}) => {\n  categories.sort((first, second) => { return first.priority > second.priority })\n\n  return (\n    <nav className=\"menu\">\n      {\n        categories.map( (category) => {\n          return <Link to={category.url} key={category.name}><span>{category.displayText}</span></Link>\n        })\n      }\n    </nav>\n  )\n}\n\nexport default Nav","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Nav from \"../components/nav\"\n\nconst _ = require(`lodash`)\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <Nav categories={data.site.siteMetadata.categories}/>\n      <hr />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          {post.frontmatter.tags && (\n            <span>Tags: {post.frontmatter.tags.map (tag => {\n              const tagLinkUrl = `/tags/`+_.kebabCase(tag)\n              return <span className=\"tag\"><Link to ={tagLinkUrl}>{tag}</Link></span>\n            })}</span>\n          )}\n          <p>{post.frontmatter.date}{post.frontmatter.updated != null && `; updated on ` + post.frontmatter.updated}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n      </article>\n      <hr />\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        categories {\n          displayText\n          priority\n          name\n          url\n        }\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        category\n        date(formatString: \"MMMM DD, YYYY\")\n        updated(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}