{"version":3,"sources":["webpack://bestalign-blog/./src/components/nav.js","webpack://bestalign-blog/./src/templates/tag-page.js"],"names":["categories","sort","first","second","priority","className","map","category","Link","to","url","key","name","displayText","pageContext","data","location","tag","allMarkdownRemark","edges","totalCount","siteTitle","site","siteMetadata","title","tagHeader","description","style","listStyle","node","slug","fields","frontmatter","itemScope","itemType","itemProp","date"],"mappings":"6IAiBA,IAdY,SAAC,GAAkB,IAAjBA,EAAgB,EAAhBA,WAGZ,OAFAA,EAAWC,MAAK,SAACC,EAAOC,GAAa,OAAOD,EAAME,SAAWD,EAAOC,YAGlE,uBAAKC,UAAU,QAEXL,EAAWM,KAAK,SAACC,GACf,OAAO,gBAAC,EAAAC,KAAD,CAAMC,GAAIF,EAASG,IAAKC,IAAKJ,EAASK,MAAM,4BAAOL,EAASM,oB,+FCoE7E,UAvEa,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAQH,EAARG,IACR,EAA8BF,EAAKG,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,GAAY,UAAAN,EAAKO,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAeL,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,gBAAC,IAAD,CAAQD,SAAUA,EAAUQ,MAAOH,GACjC,gBAAC,IAAD,CACEG,MAAOP,EACPS,YAAaD,IAEf,gBAAC,IAAD,CAAKzB,WAAYe,EAAKO,KAAKC,aAAavB,aACxC,2BACA,sBAAIK,UAAU,mBAAmBoB,GACjC,2BAEA,sBAAIpB,UAAU,YAAYsB,MAAO,CAAEC,UAAU,SAC1CT,EAAMb,KAAI,YAAa,IAAXuB,EAAU,EAAVA,KACHC,EAASD,EAAKE,OAAdD,KACAN,EAAUK,EAAKG,YAAfR,MAER,OACE,sBAAIb,IAAKmB,GACP,2BACEzB,UAAU,iBACV4B,WAAS,EACTC,SAAS,6BAET,gBAAC,EAAA1B,KAAD,CAAMC,GAAIqB,EAAMK,SAAS,OACvB,wBAAMA,SAAS,YAAYX,IAE7B,4BAAOK,EAAKG,YAAYI,YAOlC,0BACA,gBAAC,EAAA5B,KAAD,CAAMC,GAAG,QAAQJ,UAAU,gBAA3B","file":"component---src-templates-tag-page-js-1d0089003998da461e34.js","sourcesContent":["import { Link } from \"gatsby\"\nimport * as React from \"react\"\n\nconst Nav = ({categories}) => {\n  categories.sort((first, second) => { return first.priority > second.priority })\n\n  return (\n    <nav className=\"menu\">\n      {\n        categories.map( (category) => {\n          return <Link to={category.url} key={category.name}><span>{category.displayText}</span></Link>\n        })\n      }\n    </nav>\n  )\n}\n\nexport default Nav","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Nav from \"../components/nav\"\nimport Seo from \"../components/seo\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo \n        title={tag}\n        description={tagHeader}\n      />\n      <Nav categories={data.site.siteMetadata.categories}/>\n      <hr />\n      <h6 className=\"tag-description\">{tagHeader}</h6>\n      <hr />\n    \n      <ol className=\"post-list\" style={{ listStyle: `none` }}>\n        {edges.map(({node}) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n\n          return (\n            <li key={slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <Link to={slug} itemProp=\"url\">\n                  <span itemProp=\"headline\">{title}</span>\n                </Link>\n                <time>{node.frontmatter.date}</time>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n\n      <p></p>\n      <Link to=\"/tags\" className=\"all-tag-link\">See all tags</Link>\n    \n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        categories {\n          displayText\n          priority\n          name\n          url\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {frontmatter: {tags: {in: [$tag]}, draft: {ne: true}}}\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}