{"componentChunkName":"component---src-templates-blog-post-js","path":"/dev/understanding-loose-typing-in-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"bestalign's dev blog","categories":[{"displayText":"홈","priority":0,"name":"home","url":"/"},{"displayText":"TIL","priority":1,"name":"til","url":"/til"},{"displayText":"개발","priority":2,"name":"dev","url":"/dev"},{"displayText":"독서","priority":3,"name":"reading","url":"/reading"},{"displayText":"번역","priority":4,"name":"translation","url":"/translation"},{"displayText":"일기","priority":5,"name":"everydaylife","url":"/everydaylife"}]}},"markdownRemark":{"id":"caf84e61-448e-5c56-8a9b-3d8c9075fcd6","excerpt":"원문: http://blog.jeremymartin.name/2008/03/understanding-loose-typing-in.html JavaScript: The Right Way에는 부분적으로 번역되어있기 때문에 전문을 번역해보았다. 대략…","html":"<p>원문: <a href=\"http://blog.jeremymartin.name/2008/03/understanding-loose-typing-in.html\">http://blog.jeremymartin.name/2008/03/understanding-loose-typing-in.html</a></p>\n<p><a href=\"http://jstherightway.org/ko-kr/\">JavaScript: The Right Way</a>에는 부분적으로 번역되어있기 때문에 전문을 번역해보았다. 대략 8년 전의 글로 아주 오래된 글이지만 지금 보기에도 여전히 좋은 내용이다. 다만 현 ECMAScript와 다른 부분이 있어서 그 부분은 직접 수정하였다.</p>\n<hr>\n<p>많은 Front-end 개발자들에게 JavaScript는 처음으로 접하는 인터프리터 언어이자 스크립트 언어이다. 이 개발자들에게 느슨한 타입의 개념은 아주 자연스러운 것이다. 하지만 모던 웹 애플리케이션에 대한 수요가 폭발적으로 증가함에 따라 클라이언트 측 기술에 발을 디딘 Back-end 개발자들도 점점 많아지고 있는데, C#이나 Java 같은 강한 타입의 언어에 친숙한 이 사람들에게는 느슨한 타입의 변수들이 주는 자유로움이나 잠재적인 위험들이 익숙하지 않다.</p>\n<p>느슨한 타입의 개념은 JavaScript에서 코드를 작성할 때 아주 필수적인 것이기 때문에, 이것을 이해하는 것은 아주 중요하다. 이 글에서는 JavaScript의 느슨한 타입에 대해서 중점적으로 논의해볼 것이다. 느슨한 타입의 개념이 언어마다 약간씩의 차이가 존재하므로 JavaScript로만 제한을 둘 것이다. 자 이제 한번 살펴보도록 하자.</p>\n<h2 id=\"느슨한-타입이란-무엇인가\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EC%8A%A8%ED%95%9C-%ED%83%80%EC%9E%85%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"느슨한 타입이란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느슨한 타입이란 무엇인가?</h2>\n<p>음… 시작하기 좋은 주제이다. 느슨한 타입이 무엇인지 느슨한 타입이 아닌 것은 무엇인지 둘 다 이해하는 것이 중요하다. 느슨한 타입은 타입 없이 변수를 선언하는 것이다. 반면에 강력한 타입(strong typing)을 사용하는 언어는 타입과 함께 변수를 선언해야만 한다. 다음의 예제를 살펴보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* JavaScript Example (loose typing) */</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Number 선언</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"thirteen\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String 선언</span>\n\n<span class=\"token comment\">/* Java Example (strong typing) */</span>\nint a <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// int 선언</span>\nString b <span class=\"token operator\">=</span> <span class=\"token string\">\"thirteen\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String 선언</span></code></pre></div>\n<p>JavaScript 예제에서 <code class=\"language-text\">a</code>와 <code class=\"language-text\">b</code> 둘 다 var type으로 선언되었다는 걸 기억하자. 하지만 이것이 타입이 없다거나 var 타입이라는 뜻은 아니다. JavaScript의 변수는 타입을 가지고 있지만, 내부적으로 정해질 뿐이다. 위의 예제에서는, <code class=\"language-text\">a</code>의 타입은 <strong>Number</strong>, <code class=\"language-text\">b</code>의 타입은 <strong>String</strong>이 될 것이다.  JavaScript는 모두 5개의 Primitive type을 가지고 있는데 위의 둘과 <strong>Boolean</strong>, <strong>Null</strong>, <strong>Undefined</strong>이다<sup>1</sup>.</p>\n<h2 id=\"타입-변환type-coercion\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98type-coercion\" aria-label=\"타입 변환type coercion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 변환(Type Coercion)</h2>\n<p>타입 변환은 느슨한 타입과 아주 가까운 관계가 있는 주제이다. 내부적으로 타입이 관리되기 때문에, 종종 타입들이 내부적으로 바뀔 때도 있다. 타입 변환의 규칙을 아는 것은 아주아주 중요하다. 다음과 같은 표현식을 생각해보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 21  </span>\n<span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 147  </span>\n<span class=\"token string\">\"7\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 777 </span></code></pre></div>\n<p>위의 예제에서 계산 식은 <strong>String</strong>을 만나기 전까지 정상적으로 계산된다. 일단 <strong>String</strong>을 만난 이후로는 모든 숫자가 <strong>String</strong>으로 변환되고 결합(concatenate)된다.</p>\n<p>타입 변환은 또한 값 비교를 할 때도 일어난다. 하지만 <code class=\"language-text\">===</code>연산자를 써서 타입 변환을 막을 수 있다. 다음을 보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true  </span>\n<span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false  </span>\n  \n<span class=\"token number\">7</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true  </span>\n<span class=\"token number\">7</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"7\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false; </span></code></pre></div>\n<p><code class=\"language-text\">parseInt</code>나 <code class=\"language-text\">parseFloat</code>같은 명시적으로 타입 변환을 하는 함수도 존재한다(둘 다 <strong>String</strong>에서 <strong>Number</strong>로 변환하는 함수이다).</p>\n<p>이중 부정(<code class=\"language-text\">!!</code>)을 사용해서 <strong>Number</strong>를 <strong>Boolean</strong>으로 변환할 수 있다. 다음의 예제를 보자:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = false</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = true</span></code></pre></div>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>이 글은 JavaScript의 느슨한 타입에 대해 완벽히 신뢰할 만한 글은 아니다. 하지만 이 주제에 대해서 모르는 사람에게 유용한 자료가 되거나 이미 알고 있더라도 좋은 복습 기회가 되길 기대한다.</p>\n<hr>\n<p>[1]: 원문에는 <strong>Null</strong>, <strong>Undefined</strong>를 제외한 <strong>Number</strong>, <strong>String</strong>, <strong>Boolean</strong> 만이 primitive type이라고 설명한다. 아주 옛날 기준으로 썼기 때문으로 보인다. 나의 예전 글 <a href=\"/javascript-data-type\">JavaScript Data Type</a> 에서는 <strong>Null</strong>과 <strong>Undefined</strong>도 primitive type에 포함되어있고, 새롭게 나온 <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-primitive-value\">ESCAScript2015의 스펙</a>도 마찬가지이다.</p>","frontmatter":{"title":"자바스크립트의 느슨한 타입(Loose Typing) 이해하기","category":"dev","date":"October 21, 2015","updated":null,"description":null,"tags":["JavaScript","loose typing","strong typing"]}},"previous":{"fields":{"slug":"/dev/first-class-object/"},"frontmatter":{"title":"JavaScript의 함수는 1급 객체(first class object)이다"}},"next":{"fields":{"slug":"/dev/intro-mockito-1/"},"frontmatter":{"title":"Mockito 사용하기 1"}}},"pageContext":{"id":"caf84e61-448e-5c56-8a9b-3d8c9075fcd6","previousPostId":"8d35d1b3-f105-5ae1-998d-5776a7627645","nextPostId":"2ff08dd2-4232-51fe-b871-642290a90603"}},"staticQueryHashes":["2841359383"]}