{"componentChunkName":"component---src-templates-blog-post-js","path":"/dev/javascript-prototype/","result":{"data":{"site":{"siteMetadata":{"title":"bestalign's dev blog","categories":[{"displayText":"홈","priority":0,"name":"home","url":"/"},{"displayText":"TIL","priority":1,"name":"til","url":"/til"},{"displayText":"개발","priority":2,"name":"dev","url":"/dev"},{"displayText":"독서","priority":3,"name":"reading","url":"/reading"},{"displayText":"번역","priority":4,"name":"translation","url":"/translation"},{"displayText":"일기","priority":5,"name":"everydaylife","url":"/everydaylife"}]}},"markdownRemark":{"id":"2984b4fa-5536-5704-ab8b-64c33f652cec","excerpt":"JavaScript의 prototype를 처음부터 다시 공부하면서 적어보았다. C/C++와 Java로 프로그래밍을 시작했고 오래써왔기 때문에 prototype…","html":"<p>JavaScript의 prototype를 처음부터 다시 공부하면서 적어보았다. C/C++와 Java로 프로그래밍을 시작했고 오래써왔기 때문에 prototype을 이해하는데 꽤 오랜시간이 걸렸다. 둘 다 상속, 캡슐화, 추상화, 다형성 등을 전부 지원하지만 접근하는 방식은 좀 다를 뿐 깊게 들어가보면 동작하는 방식은 대동소이하다. Java와 비교하면서 적었기 때문에 Java를 쓰시는 분이면 이해하기 쉬울 듯하다.</p>\n<h1 id=\"java-class와-javascript-prototype\" style=\"position:relative;\"><a href=\"#java-class%EC%99%80-javascript-prototype\" aria-label=\"java class와 javascript prototype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java Class와 JavaScript Prototype</h1>\n<h2 id=\"java-class\" style=\"position:relative;\"><a href=\"#java-class\" aria-label=\"java class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java Class</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span>\n<span class=\"token comment\">// class declaration</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field</span>\n  \n  <span class=\"token comment\">// constructor</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// print method</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token comment\">// print Point in \"(x, y)\" format</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// new objects</span>\n<span class=\"token class-name\">Point</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Point</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Java는 class를 <strong>설계도</strong>삼아 object를 만들어낸다. 위의 코드에서는 Point class instance인 <em>p1</em>, <em>p2</em>가 생성된다. 메모리 관점에서 봤을 때 완전히 똑같은 object 두 개가 따로 메모리 상에 저장된다.</p>\n<h2 id=\"javascript-prototype\" style=\"position:relative;\"><a href=\"#javascript-prototype\" aria-label=\"javascript prototype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript Prototype</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// JavaScript</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Point.prototype이 자동으로 생성</span>\n\n<span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">print</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// new instances</span>\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>JavaScript 코드는 Java 코드와 비교하면서 한 줄 한 줄 설명해 해보았다.</p>\n<h3 id=\"line-2--5\" style=\"position:relative;\"><a href=\"#line-2--5\" aria-label=\"line 2  5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Line 2 ~ 5</h3>\n<p>Java에서 <em>class</em>키워드를 사용해서 class를 선언하는데 비해서, JavaScript에서는 먼저 생성자(constructor)를 만든다. <em>Point function</em>이 선언됨과 동시에 <strong>Point function object</strong>가 생성된다 — <em>JavaScript에서는 function도 object로 관리된다.</em> <strong>Point function object</strong>의 내부에는 <em>prototype</em>이라는 property가 자동적으로 생성된다. 이게 바로 Point의 prototype이다. prototype은 메모리 상에 존재하는 <strong>object</strong>이며 거기서 생성/파생되는 모든 object의 <strong>원형</strong>이 된다. 기본으로 만들어 지는 prototype은 아무런 값이 없는 object이다 — 보든 JavaScript의 Object가 그렇듯 prototype object도 <em>Object.prototype</em>을 기반으로 한 object이다.</p>\n<p><strong>생성자</strong>인 <em>Point function</em> 에서는 일반적으로 property를 만들고 초기화하는 일을 한다. Java에서는 x, y field<sup>1</sup> 를 class 내에 따로 선언하지만 JavaScript는 따로 property<sup>1</sup> 선언은 하지 않고 <strong>생성자</strong> 내에서 <code class=\"language-text\">this.x = x</code>처럼 값을 넣어서 선언 및 초기화 한다. <strong>생성자에서 추가 된 property는 prototype과는 상관없이 각 object에 종속된다.</strong></p>\n<h3 id=\"line-8--10\" style=\"position:relative;\"><a href=\"#line-8--10\" aria-label=\"line 8  10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Line 8 ~ 10</h3>\n<p><em>print method</em>를 Point의 prototype에 추가한다. 이것은 Java의 print method와 같은 역할을 하게 된다. <strong>prototype에 추가 된 method와 property는 이후에 생성된 모든 instance에서 접근이 가능하다.</strong></p>\n<h3 id=\"line-14--15\" style=\"position:relative;\"><a href=\"#line-14--15\" aria-label=\"line 14  15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Line 14 ~ 15</h3>\n<p>Line 14-15에서는 <em>new</em>키워드로 Point instance <em>p1</em>, <em>p2</em>를 생성한다. 내부적으로 동작하는 걸 자세히 따져보면 C/C++나 Java같은 instance화 라기보다는 <strong>prototype을 가리키는 빈 object를 만드는 것에 가깝다.</strong></p>\n<p><em>p1</em>과 <em>p2</em>는 아주 단순한 구조를 가지고 있다. 빈 object에 x, y property를 가지고 있고, 거기에 추가로 숨겨진 property인 <em>[[Prototype]]</em>를 가진다 — Chrome, Safari 등 많은 모던브라우저에서는 <em>__proto__</em>라는 이름을 사용하고 있지만 ECMAScript 표준은 <em>[[Prototype]]</em>이다. </p>\n<p>두 instance의 <em>[[Prototype]]</em>은 모두 <em>Person.prototype</em>를 가리킨다. 간단히 말해, <strong><em>p1</em>과 <em>p2</em>는 하나의 prototype object를 공유한다.</strong> 이렇게 prototype object를 공유함으로써 Prototype Chain과 Property Shadowing이 가능해진다.</p>\n<p><svg width=\"320\" height=\"320\" xmlns=\"http://www.w3.org/2000/svg\"><defs><marker refY=\"50\" refX=\"50\" markerHeight=\"5\" markerWidth=\"5\" viewBox=\"0 0 100 100\" se_type=\"rightarrow\" orient=\"auto\" markerUnits=\"strokeWidth\" id=\"se_marker_end_svg_6\"><path stroke-width=\"10\" stroke=\"#000000\" fill=\"#000000\" d=\"m100,50l-100,40l30,-40l-30,-40z\"/></marker><marker refY=\"50\" refX=\"50\" markerHeight=\"5\" markerWidth=\"5\" viewBox=\"0 0 100 100\" se_type=\"rightarrow\" orient=\"auto\" markerUnits=\"strokeWidth\" id=\"se_marker_end_svg_11\"><path stroke-width=\"10\" stroke=\"#000000\" fill=\"#000000\" d=\"m100,50l-100,40l30,-40l-30,-40z\"/></marker></defs><g><title>JavaScript prototype</title><rect id=\"svg_2\" height=\"80\" width=\"160\" y=\"40\" x=\"80\" stroke-width=\"2\" stroke=\"#000000\" fill=\"none\"/><text xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Nanum Gothic\" font-size=\"20\" id=\"svg_3\" y=\"60\" x=\"160\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">Point.prototype</text><rect id=\"svg_4\" height=\"80\" width=\"130\" y=\"200\" x=\"10\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"2\" stroke=\"#000000\" fill=\"none\"/><rect id=\"svg_5\" height=\"80\" width=\"130\" y=\"200\" x=\"180\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"2\" stroke=\"#000000\" fill=\"none\"/><line y=\"NaN\" x=\"NaN\" marker-end=\"url(#se_marker_end_svg_6)\" id=\"svg_6\" y2=\"130\" x2=\"140\" y1=\"200\" x1=\"80\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"2\" stroke=\"#000000\" fill=\"none\"/><text xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Nanum Gothic\" font-size=\"20\" id=\"svg_9\" y=\"220\" x=\"80\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">p1</text><text xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Nanum Gothic\" font-size=\"20\" id=\"svg_10\" y=\"220\" x=\"250\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">p2</text><line marker-end=\"url(#se_marker_end_svg_11)\" id=\"svg_11\" y2=\"130\" x2=\"180\" y1=\"200\" x1=\"230\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"2\" stroke=\"#000000\" fill=\"none\"/><text xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Nanum Gothic\" font-size=\"20\" id=\"svg_12\" y=\"260\" x=\"70\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">x:0, y:0</text><text id=\"svg_13\" xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Nanum Gothic\" font-size=\"20\" y=\"260\" x=\"240\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">x:5, y:5</text><text xml:space=\"preserve\" text-anchor=\"middle\" font-family=\"Nanum Gothic\" font-size=\"20\" id=\"svg_14\" y=\"90\" x=\"160\" stroke-linecap=\"null\" stroke-linejoin=\"null\" stroke-width=\"0\" stroke=\"#000000\" fill=\"#000000\">print function</text></g></svg></p>\n<ul>\n<li>\n<p>관련글</p>\n<ul>\n<li><a href=\"/new-prototype\">New와 Prototype</a></li>\n<li><a href=\"/prototype-chain\">Prototype Chain</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>[1]: Java에서는 field, JavaScript에서는 property</p>","frontmatter":{"title":"JavaScript Prototype","category":"dev","date":"July 07, 2015","updated":null,"description":null,"tags":["JavaScript","class","prototype","object","instance"]}},"previous":{"fields":{"slug":"/dev/javascript-data-type/"},"frontmatter":{"title":"JavaScript Data Types"}},"next":{"fields":{"slug":"/dev/lexical-scope-and-dynamic-scope/"},"frontmatter":{"title":"Lexical Scope and Dynamic Scope"}}},"pageContext":{"id":"2984b4fa-5536-5704-ab8b-64c33f652cec","previousPostId":"c03a47bb-fb39-5090-a9e8-093cf1113175","nextPostId":"1a153f1a-6d60-5538-a4c4-b4408a43c397"}},"staticQueryHashes":["2841359383"]}