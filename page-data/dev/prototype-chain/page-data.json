{"componentChunkName":"component---src-templates-blog-post-js","path":"/dev/prototype-chain/","result":{"data":{"site":{"siteMetadata":{"title":"bestalign's dev blog","categories":[{"displayText":"홈","priority":0,"name":"home","url":"/"},{"displayText":"TIL","priority":1,"name":"til","url":"/til"},{"displayText":"개발","priority":2,"name":"dev","url":"/dev"},{"displayText":"독서","priority":3,"name":"reading","url":"/reading"},{"displayText":"번역","priority":4,"name":"translation","url":"/translation"},{"displayText":"일기","priority":5,"name":"everydaylife","url":"/everydaylife"}]}},"markdownRemark":{"id":"255bfca4-521e-5d07-ba19-eaa967c77cc8","excerpt":"Prototype Chain JavaScript의 Prototype Chain은 [Prototype]으로 이루어지는 object들의 연결을 말한다. JavaScript의 Primitive Type을 제외한 모든 object는 [Prototype…","html":"<h1 id=\"prototype-chain\" style=\"position:relative;\"><a href=\"#prototype-chain\" aria-label=\"prototype chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prototype Chain</h1>\n<p><strong>JavaScript의 Prototype Chain은 <em>[[Prototype]]</em>으로 이루어지는 object들의 연결을 말한다.</strong> JavaScript의 Primitive Type을 제외한 모든 object는 <em>[[Prototype]]</em>을 가지고 있으며 그 연결된 Prototype Chain은 마치 Linked List 처럼 생겼다. Prototype Chain의 마지막은 항상 <code class=\"language-text\">Object.prototype</code>에서 끝나며, <code class=\"language-text\">Object.prototype</code>의 <em>[[Prototype]]</em>은 일반적인 Linked List처럼 null로 끝난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> A_Prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>A_Prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드는 <code class=\"language-text\">A_Prototype</code>을 만들고 거기서 A라는 instance를 생성하는 것을 보여준다. 이 object와 prototype의 Prototype Chain을 그래프로 간략히 그려보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">///////////////////////////////////////////////////////</span>\n<span class=\"token comment\">// {z:3} =>  {x:1, y:2}  => {...}            => null //</span>\n<span class=\"token comment\">// A         A_Prototype    Object.prototype         //</span>\n<span class=\"token comment\">///////////////////////////////////////////////////////</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>위의 예제에 써 있듯이 <code class=\"language-text\">A</code>, <code class=\"language-text\">A_Prototype</code>, <code class=\"language-text\">Object.prototype</code>, <code class=\"language-text\">null</code>순으로 Prototype Chain이 연결된다. <code class=\"language-text\">Object.prototype</code>에는 아주 많은 property가 있지만 가독성을 위해 생략했다. JavaScript engine은 object의 property를 접근할 때 그 object의 property 뿐만이 아니라 상황에 따라 Prototype Chain으로 연결된 상위 object의 property까지 확인하게 된다.</p>\n<p>위의 예제에서 <code class=\"language-text\">A.z</code>는 <code class=\"language-text\">A</code>의 property이므로 바로 3을 출력한다. <code class=\"language-text\">A.x</code>와 <code class=\"language-text\">A.y</code>같은 경우는 <code class=\"language-text\">A</code>가 가지고 있지 않은 property이기 때문에 Prototype Chain을 거슬러 올라가면서 확인하게 되며, <code class=\"language-text\">A_Prototype</code>의 property인 <code class=\"language-text\">A_Prototype.x</code>, <code class=\"language-text\">A_Prototype.y</code>의 값인 1, 2를 출력하게 된다. <code class=\"language-text\">A.x</code>와 <code class=\"language-text\">A.y</code>는 <code class=\"language-text\">A_Prototype</code>에게서 상속받았다고 볼 수 있다.</p>\n<p>마지막으로 <code class=\"language-text\">A.a</code>는 위의 Prototype Chain에 있는 어느 object에도 존재하지 않는 property이다. JavaScript engine은 Prototype Chain의 끝인 <code class=\"language-text\">Object.prototype</code>까지 확인한 뒤 <code class=\"language-text\">undefined</code>를 출력하게 된다.</p>\n<h1 id=\"property-shadowing\" style=\"position:relative;\"><a href=\"#property-shadowing\" aria-label=\"property shadowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property Shadowing</h1>\n<p>위의 Prototype Chain 예제에서는 <code class=\"language-text\">A</code>와 <code class=\"language-text\">A_Prototype</code> 모두 겹치지 않는 property를 가지고 있다. 만약 이들 중 이름이 겹치는 property가 존재한다면 무슨 일이 일어날까?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> A_Prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>A_Prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>JavaScript engine은 특정 property를 찾을 때 <strong>주어진 object부터</strong> Prototype Chain을 따라 상위로 올라가면서 property를 확인하고 가장 먼저 찾은 property를 가져온다. 이런 방식으로 동작하기 때문에 상위 object에 같은 이름의 property가 존재한다고 해도 무시하게 된다. 이것을 바로 Property Shadowing이라고 부른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"token comment\">// {x:4, z:3} => {x:1, y:2}  => {...}            => null //</span>\n<span class=\"token comment\">// A             A_Prototype    Object.prototype         //</span>\n<span class=\"token comment\">///////////////////////////////////////////////////////////</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>Property Shadowing에 의해서 Line 9에서는 <code class=\"language-text\">A_Prototype.x</code>의 값인 1을 상속받지 않고 <code class=\"language-text\">A.x</code>의 값인 4를 출력한다. Variable뿐만이 아니라 Function도 똑같이 object의 property가 될 수 있으므로 Prototype Chain과 Property Shadowing의 영향 하에 있다. 이를 이용해서 JavaScript에서는 <em>class</em>나 <em>extends</em> 키워드 없이 function overriding과 object inheritance를 구현한다.</p>\n<ul>\n<li>관련글: <a href=\"/javascript-prototype\">JavaScript Prototype</a></li>\n<li>참고글: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">MDN Inheritance and the Prototype Chain</a></li>\n</ul>","frontmatter":{"title":"Prototype Chain and Property Shadowing","category":"dev","date":"July 28, 2015","updated":null,"description":null,"tags":["JavaScript","prototype chain","property shadowing"]}},"previous":{"fields":{"slug":"/dev/new-prototype/"},"frontmatter":{"title":"new와 prototype"}},"next":{"fields":{"slug":"/dev/javascript-inheritance/"},"frontmatter":{"title":"JavaScript 상속"}}},"pageContext":{"id":"255bfca4-521e-5d07-ba19-eaa967c77cc8","previousPostId":"8b4d2c8d-285f-5881-a76c-73a9050b6366","nextPostId":"c4517a5d-3c9f-5275-89ad-580e3c980a98"}},"staticQueryHashes":["2841359383"]}